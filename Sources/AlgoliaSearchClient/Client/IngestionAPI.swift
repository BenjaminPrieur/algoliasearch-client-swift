//
// IngestionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

open class IngestionAPI {

  /**
     Create a authentication.

     - parameter authenticationCreate: (body)
     - returns: AuthenticationCreateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func createAuthentication(authenticationCreate: AuthenticationCreate) async throws
    -> AuthenticationCreateResponse
  {
    return try await createAuthenticationWithRequestBuilder(
      authenticationCreate: authenticationCreate
    ).execute().body
  }

  /**
     Create a authentication.

     Create a authentication.
     - parameter authenticationCreate: (body)
     - returns: RequestBuilder<AuthenticationCreateResponse>
     */
  open class func createAuthenticationWithRequestBuilder(authenticationCreate: AuthenticationCreate)
    -> RequestBuilder<AuthenticationCreateResponse>
  {
    let localVariablePath = "/1/authentications"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: authenticationCreate)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AuthenticationCreateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Create a destination.

     - parameter destinationCreate: (body)
     - returns: DestinationCreateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func createDestination(destinationCreate: DestinationCreate) async throws
    -> DestinationCreateResponse
  {
    return try await createDestinationWithRequestBuilder(destinationCreate: destinationCreate)
      .execute().body
  }

  /**
     Create a destination.

     Create a destination.
     - parameter destinationCreate: (body)
     - returns: RequestBuilder<DestinationCreateResponse>
     */
  open class func createDestinationWithRequestBuilder(destinationCreate: DestinationCreate)
    -> RequestBuilder<DestinationCreateResponse>
  {
    let localVariablePath = "/1/destinations"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: destinationCreate)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<DestinationCreateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Create a source.

     - parameter sourceCreate: (body)
     - returns: SourceCreateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func createSource(sourceCreate: SourceCreate) async throws -> SourceCreateResponse {
    return try await createSourceWithRequestBuilder(sourceCreate: sourceCreate).execute().body
  }

  /**
     Create a source.

     Create a source.
     - parameter sourceCreate: (body)
     - returns: RequestBuilder<SourceCreateResponse>
     */
  open class func createSourceWithRequestBuilder(sourceCreate: SourceCreate) -> RequestBuilder<
    SourceCreateResponse
  > {
    let localVariablePath = "/1/sources"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: sourceCreate)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<SourceCreateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Create a task.

     - parameter taskCreate: (body)
     - returns: TaskCreateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func createTask(taskCreate: TaskCreate) async throws -> TaskCreateResponse {
    return try await createTaskWithRequestBuilder(taskCreate: taskCreate).execute().body
  }

  /**
     Create a task.

     Create a task.
     - parameter taskCreate: (body)
     - returns: RequestBuilder<TaskCreateResponse>
     */
  open class func createTaskWithRequestBuilder(taskCreate: TaskCreate) -> RequestBuilder<
    TaskCreateResponse
  > {
    let localVariablePath = "/1/tasks"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: taskCreate)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<TaskCreateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customDelete(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customDeleteWithRequestBuilder(path: path, parameters: parameters).execute()
      .body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customDeleteWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customGet(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customGetWithRequestBuilder(path: path, parameters: parameters).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customGetWithRequestBuilder(path: String, parameters: [String: AnyCodable]? = nil)
    -> RequestBuilder<AnyCodable>
  {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customPost(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) async throws -> AnyCodable {
    return try await customPostWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customPostWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customPut(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) async throws -> AnyCodable {
    return try await customPutWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customPutWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Delete a authentication.

     - parameter authenticationID: (path) The authentication UUID.
     - returns: DeleteResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteAuthentication(authenticationID: String) async throws -> DeleteResponse {
    return try await deleteAuthenticationWithRequestBuilder(authenticationID: authenticationID)
      .execute().body
  }

  /**
     Delete a authentication.

     Soft delete the authentication of the given authenticationID.
     - parameter authenticationID: (path) The authentication UUID.
     - returns: RequestBuilder<DeleteResponse>
     */
  open class func deleteAuthenticationWithRequestBuilder(authenticationID: String)
    -> RequestBuilder<DeleteResponse>
  {
    var localVariablePath = "/1/authentications/{authenticationID}"
    let authenticationIDPreEscape = "\(APIHelper.mapValueToPathItem(authenticationID))"
    let authenticationIDPostEscape =
      authenticationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{authenticationID}", with: authenticationIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<DeleteResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Delete a destination.

     - parameter destinationID: (path) The destination UUID.
     - returns: DeleteResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteDestination(destinationID: String) async throws -> DeleteResponse {
    return try await deleteDestinationWithRequestBuilder(destinationID: destinationID).execute()
      .body
  }

  /**
     Delete a destination.

     Soft delete the destination of the given destinationID.
     - parameter destinationID: (path) The destination UUID.
     - returns: RequestBuilder<DeleteResponse>
     */
  open class func deleteDestinationWithRequestBuilder(destinationID: String) -> RequestBuilder<
    DeleteResponse
  > {
    var localVariablePath = "/1/destinations/{destinationID}"
    let destinationIDPreEscape = "\(APIHelper.mapValueToPathItem(destinationID))"
    let destinationIDPostEscape =
      destinationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{destinationID}", with: destinationIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<DeleteResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Delete a source.

     - parameter sourceID: (path) The source UUID.
     - returns: DeleteResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteSource(sourceID: String) async throws -> DeleteResponse {
    return try await deleteSourceWithRequestBuilder(sourceID: sourceID).execute().body
  }

  /**
     Delete a source.

     Soft delete the source of the given sourceID.
     - parameter sourceID: (path) The source UUID.
     - returns: RequestBuilder<DeleteResponse>
     */
  open class func deleteSourceWithRequestBuilder(sourceID: String) -> RequestBuilder<DeleteResponse>
  {
    var localVariablePath = "/1/sources/{sourceID}"
    let sourceIDPreEscape = "\(APIHelper.mapValueToPathItem(sourceID))"
    let sourceIDPostEscape =
      sourceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{sourceID}", with: sourceIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<DeleteResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Delete a task.

     - parameter taskID: (path) The task UUID.
     - returns: DeleteResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteTask(taskID: String) async throws -> DeleteResponse {
    return try await deleteTaskWithRequestBuilder(taskID: taskID).execute().body
  }

  /**
     Delete a task.

     Soft delete the task of the given taskID.
     - parameter taskID: (path) The task UUID.
     - returns: RequestBuilder<DeleteResponse>
     */
  open class func deleteTaskWithRequestBuilder(taskID: String) -> RequestBuilder<DeleteResponse> {
    var localVariablePath = "/1/tasks/{taskID}"
    let taskIDPreEscape = "\(APIHelper.mapValueToPathItem(taskID))"
    let taskIDPostEscape =
      taskIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{taskID}", with: taskIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<DeleteResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Disable a task.

     - parameter taskID: (path) The task UUID.
     - returns: TaskUpdateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func disableTask(taskID: String) async throws -> TaskUpdateResponse {
    return try await disableTaskWithRequestBuilder(taskID: taskID).execute().body
  }

  /**
     Disable a task.

     Disable the task of the given taskID.
     - parameter taskID: (path) The task UUID.
     - returns: RequestBuilder<TaskUpdateResponse>
     */
  open class func disableTaskWithRequestBuilder(taskID: String) -> RequestBuilder<
    TaskUpdateResponse
  > {
    var localVariablePath = "/1/tasks/{taskID}/disable"
    let taskIDPreEscape = "\(APIHelper.mapValueToPathItem(taskID))"
    let taskIDPostEscape =
      taskIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{taskID}", with: taskIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<TaskUpdateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Enable a task.

     - parameter taskID: (path) The task UUID.
     - returns: TaskUpdateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func enableTask(taskID: String) async throws -> TaskUpdateResponse {
    return try await enableTaskWithRequestBuilder(taskID: taskID).execute().body
  }

  /**
     Enable a task.

     Enable the task of the given taskID.
     - parameter taskID: (path) The task UUID.
     - returns: RequestBuilder<TaskUpdateResponse>
     */
  open class func enableTaskWithRequestBuilder(taskID: String) -> RequestBuilder<TaskUpdateResponse>
  {
    var localVariablePath = "/1/tasks/{taskID}/enable"
    let taskIDPreEscape = "\(APIHelper.mapValueToPathItem(taskID))"
    let taskIDPostEscape =
      taskIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{taskID}", with: taskIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<TaskUpdateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a authentication.

     - parameter authenticationID: (path) The authentication UUID.
     - returns: Authentication
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getAuthentication(authenticationID: String) async throws -> Authentication {
    return try await getAuthenticationWithRequestBuilder(authenticationID: authenticationID)
      .execute().body
  }

  /**
     Get a authentication.

     Get the authentication of the given authenticationID.
     - parameter authenticationID: (path) The authentication UUID.
     - returns: RequestBuilder<Authentication>
     */
  open class func getAuthenticationWithRequestBuilder(authenticationID: String) -> RequestBuilder<
    Authentication
  > {
    var localVariablePath = "/1/authentications/{authenticationID}"
    let authenticationIDPreEscape = "\(APIHelper.mapValueToPathItem(authenticationID))"
    let authenticationIDPostEscape =
      authenticationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{authenticationID}", with: authenticationIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<Authentication>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a list of authentications.

     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter type: (query) The type of the authentications to retrieve. (optional)
     - parameter platform: (query) The platform of the authentications to retrieve. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - returns: ListAuthenticationsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getAuthentications(
    itemsPerPage: Int? = nil, page: Int? = nil, type: [AuthenticationType]? = nil,
    platform: [PlatformWithNone]? = nil, sort: AuthenticationSortKeys? = nil,
    order: OrderKeys? = nil
  ) async throws -> ListAuthenticationsResponse {
    return try await getAuthenticationsWithRequestBuilder(
      itemsPerPage: itemsPerPage, page: page, type: type, platform: platform, sort: sort,
      order: order
    ).execute().body
  }

  /**
     Get a list of authentications.

     Get a list of authentications for the given query parameters, with pagination details.
     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter type: (query) The type of the authentications to retrieve. (optional)
     - parameter platform: (query) The platform of the authentications to retrieve. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - returns: RequestBuilder<ListAuthenticationsResponse>
     */
  open class func getAuthenticationsWithRequestBuilder(
    itemsPerPage: Int? = nil, page: Int? = nil, type: [AuthenticationType]? = nil,
    platform: [PlatformWithNone]? = nil, sort: AuthenticationSortKeys? = nil,
    order: OrderKeys? = nil
  ) -> RequestBuilder<ListAuthenticationsResponse> {
    let localVariablePath = "/1/authentications"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "itemsPerPage": (wrappedValue: itemsPerPage?.encodeToJSON(), isExplode: true),
      "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
      "type": (wrappedValue: type?.encodeToJSON(), isExplode: false),
      "platform": (wrappedValue: platform?.encodeToJSON(), isExplode: false),
      "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
      "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ListAuthenticationsResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a destination.

     - parameter destinationID: (path) The destination UUID.
     - returns: Destination
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getDestination(destinationID: String) async throws -> Destination {
    return try await getDestinationWithRequestBuilder(destinationID: destinationID).execute().body
  }

  /**
     Get a destination.

     Get the destination of the given destinationID.
     - parameter destinationID: (path) The destination UUID.
     - returns: RequestBuilder<Destination>
     */
  open class func getDestinationWithRequestBuilder(destinationID: String) -> RequestBuilder<
    Destination
  > {
    var localVariablePath = "/1/destinations/{destinationID}"
    let destinationIDPreEscape = "\(APIHelper.mapValueToPathItem(destinationID))"
    let destinationIDPostEscape =
      destinationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{destinationID}", with: destinationIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<Destination>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a list of destinations.

     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter type: (query) The type of the destinations to retrive. (optional)
     - parameter authenticationID: (query) The authenticationIDs of the destinations to retrive. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - returns: ListDestinationsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getDestinations(
    itemsPerPage: Int? = nil, page: Int? = nil, type: [DestinationType]? = nil,
    authenticationID: [String]? = nil, sort: DestinationSortKeys? = nil, order: OrderKeys? = nil
  ) async throws -> ListDestinationsResponse {
    return try await getDestinationsWithRequestBuilder(
      itemsPerPage: itemsPerPage, page: page, type: type, authenticationID: authenticationID,
      sort: sort, order: order
    ).execute().body
  }

  /**
     Get a list of destinations.

     Get a list of destinations for the given query parameters, with pagination details.
     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter type: (query) The type of the destinations to retrive. (optional)
     - parameter authenticationID: (query) The authenticationIDs of the destinations to retrive. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - returns: RequestBuilder<ListDestinationsResponse>
     */
  open class func getDestinationsWithRequestBuilder(
    itemsPerPage: Int? = nil, page: Int? = nil, type: [DestinationType]? = nil,
    authenticationID: [String]? = nil, sort: DestinationSortKeys? = nil, order: OrderKeys? = nil
  ) -> RequestBuilder<ListDestinationsResponse> {
    let localVariablePath = "/1/destinations"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "itemsPerPage": (wrappedValue: itemsPerPage?.encodeToJSON(), isExplode: true),
      "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
      "type": (wrappedValue: type?.encodeToJSON(), isExplode: false),
      "authenticationID": (wrappedValue: authenticationID?.encodeToJSON(), isExplode: false),
      "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
      "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ListDestinationsResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Retrieve a stream listing.

     - parameter sourceID: (path) The source UUID.
     - returns: DockerSourceStreams
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getDockerSourceStreams(sourceID: String) async throws -> DockerSourceStreams {
    return try await getDockerSourceStreamsWithRequestBuilder(sourceID: sourceID).execute().body
  }

  /**
     Retrieve a stream listing.

     Retrieve a stream listing for a given Singer specification compatible docker type source ID.
     - parameter sourceID: (path) The source UUID.
     - returns: RequestBuilder<DockerSourceStreams>
     */
  open class func getDockerSourceStreamsWithRequestBuilder(sourceID: String) -> RequestBuilder<
    DockerSourceStreams
  > {
    var localVariablePath = "/1/sources/{sourceID}/discover"
    let sourceIDPreEscape = "\(APIHelper.mapValueToPathItem(sourceID))"
    let sourceIDPostEscape =
      sourceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{sourceID}", with: sourceIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<DockerSourceStreams>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get an event.

     - parameter runID: (path) The run UUID.
     - parameter eventID: (path) The event UUID.
     - returns: Event
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getEvent(runID: String, eventID: String) async throws -> Event {
    return try await getEventWithRequestBuilder(runID: runID, eventID: eventID).execute().body
  }

  /**
     Get an event.

     Get a single event for a specific runID.
     - parameter runID: (path) The run UUID.
     - parameter eventID: (path) The event UUID.
     - returns: RequestBuilder<Event>
     */
  open class func getEventWithRequestBuilder(runID: String, eventID: String) -> RequestBuilder<
    Event
  > {
    var localVariablePath = "/1/runs/{runID}/events/{eventID}"
    let runIDPreEscape = "\(APIHelper.mapValueToPathItem(runID))"
    let runIDPostEscape =
      runIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{runID}", with: runIDPostEscape, options: .literal, range: nil)
    let eventIDPreEscape = "\(APIHelper.mapValueToPathItem(eventID))"
    let eventIDPostEscape =
      eventIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{eventID}", with: eventIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<Event>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a list of events.

     - parameter runID: (path) The run UUID.
     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter status: (query) Filter the status of the events. (optional)
     - parameter type: (query) Filter the type of the events. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - parameter startDate: (query) The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)
     - parameter endDate: (query) The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)
     - returns: ListEventsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getEvents(
    runID: String, itemsPerPage: Int? = nil, page: Int? = nil, status: [EventStatus]? = nil,
    type: [EventType]? = nil, sort: EventSortKeys? = nil, order: OrderKeys? = nil,
    startDate: String? = nil, endDate: String? = nil
  ) async throws -> ListEventsResponse {
    return try await getEventsWithRequestBuilder(
      runID: runID, itemsPerPage: itemsPerPage, page: page, status: status, type: type, sort: sort,
      order: order, startDate: startDate, endDate: endDate
    ).execute().body
  }

  /**
     Get a list of events.

     Get a list of events associated to the given runID, for the given query parameters.
     - parameter runID: (path) The run UUID.
     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter status: (query) Filter the status of the events. (optional)
     - parameter type: (query) Filter the type of the events. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - parameter startDate: (query) The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)
     - parameter endDate: (query) The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)
     - returns: RequestBuilder<ListEventsResponse>
     */
  open class func getEventsWithRequestBuilder(
    runID: String, itemsPerPage: Int? = nil, page: Int? = nil, status: [EventStatus]? = nil,
    type: [EventType]? = nil, sort: EventSortKeys? = nil, order: OrderKeys? = nil,
    startDate: String? = nil, endDate: String? = nil
  ) -> RequestBuilder<ListEventsResponse> {
    var localVariablePath = "/1/runs/{runID}/events"
    let runIDPreEscape = "\(APIHelper.mapValueToPathItem(runID))"
    let runIDPostEscape =
      runIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{runID}", with: runIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "itemsPerPage": (wrappedValue: itemsPerPage?.encodeToJSON(), isExplode: true),
      "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
      "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
      "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
      "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
      "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ListEventsResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a run.

     - parameter runID: (path) The run UUID.
     - returns: Run
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getRun(runID: String) async throws -> Run {
    return try await getRunWithRequestBuilder(runID: runID).execute().body
  }

  /**
     Get a run.

     Get a single run for the given ID.
     - parameter runID: (path) The run UUID.
     - returns: RequestBuilder<Run>
     */
  open class func getRunWithRequestBuilder(runID: String) -> RequestBuilder<Run> {
    var localVariablePath = "/1/runs/{runID}"
    let runIDPreEscape = "\(APIHelper.mapValueToPathItem(runID))"
    let runIDPostEscape =
      runIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{runID}", with: runIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<Run>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a list of runs.

     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter status: (query) Filter the status of the runs. (optional)
     - parameter taskID: (query) Filter by taskID. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - parameter startDate: (query) The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)
     - parameter endDate: (query) The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)
     - returns: RunListResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getRuns(
    itemsPerPage: Int? = nil, page: Int? = nil, status: [RunStatus]? = nil, taskID: String? = nil,
    sort: RunSortKeys? = nil, order: OrderKeys? = nil, startDate: String? = nil,
    endDate: String? = nil
  ) async throws -> RunListResponse {
    return try await getRunsWithRequestBuilder(
      itemsPerPage: itemsPerPage, page: page, status: status, taskID: taskID, sort: sort,
      order: order, startDate: startDate, endDate: endDate
    ).execute().body
  }

  /**
     Get a list of runs.

     Get a list of runs for the given query parameters, with pagination details.
     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter status: (query) Filter the status of the runs. (optional)
     - parameter taskID: (query) Filter by taskID. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - parameter startDate: (query) The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)
     - parameter endDate: (query) The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)
     - returns: RequestBuilder<RunListResponse>
     */
  open class func getRunsWithRequestBuilder(
    itemsPerPage: Int? = nil, page: Int? = nil, status: [RunStatus]? = nil, taskID: String? = nil,
    sort: RunSortKeys? = nil, order: OrderKeys? = nil, startDate: String? = nil,
    endDate: String? = nil
  ) -> RequestBuilder<RunListResponse> {
    let localVariablePath = "/1/runs"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "itemsPerPage": (wrappedValue: itemsPerPage?.encodeToJSON(), isExplode: true),
      "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
      "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
      "taskID": (wrappedValue: taskID?.encodeToJSON(), isExplode: true),
      "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
      "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<RunListResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a source.

     - parameter sourceID: (path) The source UUID.
     - returns: Source
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getSource(sourceID: String) async throws -> Source {
    return try await getSourceWithRequestBuilder(sourceID: sourceID).execute().body
  }

  /**
     Get a source.

     Get the source of the given sourceID.
     - parameter sourceID: (path) The source UUID.
     - returns: RequestBuilder<Source>
     */
  open class func getSourceWithRequestBuilder(sourceID: String) -> RequestBuilder<Source> {
    var localVariablePath = "/1/sources/{sourceID}"
    let sourceIDPreEscape = "\(APIHelper.mapValueToPathItem(sourceID))"
    let sourceIDPostEscape =
      sourceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{sourceID}", with: sourceIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<Source>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a list of sources.

     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter type: (query) The type of the sources to retrieve. (optional)
     - parameter authenticationID: (query) The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - returns: ListSourcesResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getSources(
    itemsPerPage: Int? = nil, page: Int? = nil, type: [SourceType]? = nil,
    authenticationID: [String]? = nil, sort: SourceSortKeys? = nil, order: OrderKeys? = nil
  ) async throws -> ListSourcesResponse {
    return try await getSourcesWithRequestBuilder(
      itemsPerPage: itemsPerPage, page: page, type: type, authenticationID: authenticationID,
      sort: sort, order: order
    ).execute().body
  }

  /**
     Get a list of sources.

     Get a list of sources for the given query parameters, with pagination details.
     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter type: (query) The type of the sources to retrieve. (optional)
     - parameter authenticationID: (query) The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - returns: RequestBuilder<ListSourcesResponse>
     */
  open class func getSourcesWithRequestBuilder(
    itemsPerPage: Int? = nil, page: Int? = nil, type: [SourceType]? = nil,
    authenticationID: [String]? = nil, sort: SourceSortKeys? = nil, order: OrderKeys? = nil
  ) -> RequestBuilder<ListSourcesResponse> {
    let localVariablePath = "/1/sources"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "itemsPerPage": (wrappedValue: itemsPerPage?.encodeToJSON(), isExplode: true),
      "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
      "type": (wrappedValue: type?.encodeToJSON(), isExplode: false),
      "authenticationID": (wrappedValue: authenticationID?.encodeToJSON(), isExplode: false),
      "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
      "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ListSourcesResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a task.

     - parameter taskID: (path) The task UUID.
     - returns: IngestionTask
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getTask(taskID: String) async throws -> IngestionTask {
    return try await getTaskWithRequestBuilder(taskID: taskID).execute().body
  }

  /**
     Get a task.

     Get the task of the given taskID.
     - parameter taskID: (path) The task UUID.
     - returns: RequestBuilder<IngestionTask>
     */
  open class func getTaskWithRequestBuilder(taskID: String) -> RequestBuilder<IngestionTask> {
    var localVariablePath = "/1/tasks/{taskID}"
    let taskIDPreEscape = "\(APIHelper.mapValueToPathItem(taskID))"
    let taskIDPostEscape =
      taskIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{taskID}", with: taskIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<IngestionTask>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a list of tasks.

     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter action: (query) The action of the tasks to retrieve. (optional)
     - parameter enabled: (query) Whether the task is enabled or not. (optional)
     - parameter sourceID: (query) The sourceIDs of the tasks to retrive. (optional)
     - parameter destinationID: (query) The destinationIDs of the tasks to retrive. (optional)
     - parameter triggerType: (query) The trigger type of the task. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - returns: ListTasksResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getTasks(
    itemsPerPage: Int? = nil, page: Int? = nil, action: [ActionType]? = nil, enabled: Bool? = nil,
    sourceID: [String]? = nil, destinationID: [String]? = nil, triggerType: [TriggerType]? = nil,
    sort: TaskSortKeys? = nil, order: OrderKeys? = nil
  ) async throws -> ListTasksResponse {
    return try await getTasksWithRequestBuilder(
      itemsPerPage: itemsPerPage, page: page, action: action, enabled: enabled, sourceID: sourceID,
      destinationID: destinationID, triggerType: triggerType, sort: sort, order: order
    ).execute().body
  }

  /**
     Get a list of tasks.

     Get a list of tasks for the given query parameters, with pagination details.
     - parameter itemsPerPage: (query) The number of items per page to return. (optional)
     - parameter page: (query) The page number to fetch, starting at 1. (optional)
     - parameter action: (query) The action of the tasks to retrieve. (optional)
     - parameter enabled: (query) Whether the task is enabled or not. (optional)
     - parameter sourceID: (query) The sourceIDs of the tasks to retrive. (optional)
     - parameter destinationID: (query) The destinationIDs of the tasks to retrive. (optional)
     - parameter triggerType: (query) The trigger type of the task. (optional)
     - parameter sort: (query) The key by which the list should be sorted. (optional)
     - parameter order: (query) The order of the returned list. (optional)
     - returns: RequestBuilder<ListTasksResponse>
     */
  open class func getTasksWithRequestBuilder(
    itemsPerPage: Int? = nil, page: Int? = nil, action: [ActionType]? = nil, enabled: Bool? = nil,
    sourceID: [String]? = nil, destinationID: [String]? = nil, triggerType: [TriggerType]? = nil,
    sort: TaskSortKeys? = nil, order: OrderKeys? = nil
  ) -> RequestBuilder<ListTasksResponse> {
    let localVariablePath = "/1/tasks"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "itemsPerPage": (wrappedValue: itemsPerPage?.encodeToJSON(), isExplode: true),
      "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
      "action": (wrappedValue: action?.encodeToJSON(), isExplode: false),
      "enabled": (wrappedValue: enabled?.encodeToJSON(), isExplode: true),
      "sourceID": (wrappedValue: sourceID?.encodeToJSON(), isExplode: false),
      "destinationID": (wrappedValue: destinationID?.encodeToJSON(), isExplode: false),
      "triggerType": (wrappedValue: triggerType?.encodeToJSON(), isExplode: false),
      "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
      "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ListTasksResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Run a task.

     - parameter taskID: (path) The task UUID.
     - returns: RunResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func runTask(taskID: String) async throws -> RunResponse {
    return try await runTaskWithRequestBuilder(taskID: taskID).execute().body
  }

  /**
     Run a task.

     Run the task of the given taskID.
     - parameter taskID: (path) The task UUID.
     - returns: RequestBuilder<RunResponse>
     */
  open class func runTaskWithRequestBuilder(taskID: String) -> RequestBuilder<RunResponse> {
    var localVariablePath = "/1/tasks/{taskID}/run"
    let taskIDPreEscape = "\(APIHelper.mapValueToPathItem(taskID))"
    let taskIDPostEscape =
      taskIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{taskID}", with: taskIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<RunResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Search among authentications.

     - parameter authenticationSearch: (body)
     - returns: [Authentication]
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func searchAuthentications(authenticationSearch: AuthenticationSearch) async throws
    -> [Authentication]
  {
    return try await searchAuthenticationsWithRequestBuilder(
      authenticationSearch: authenticationSearch
    ).execute().body
  }

  /**
     Search among authentications.

     Search among authentications with a defined set of parameters.
     - parameter authenticationSearch: (body)
     - returns: RequestBuilder<[Authentication]>
     */
  open class func searchAuthenticationsWithRequestBuilder(
    authenticationSearch: AuthenticationSearch
  ) -> RequestBuilder<[Authentication]> {
    let localVariablePath = "/1/authentications/search"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: authenticationSearch)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<[Authentication]>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Search among destinations.

     - parameter destinationSearch: (body)
     - returns: [Destination]
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func searchDestinations(destinationSearch: DestinationSearch) async throws
    -> [Destination]
  {
    return try await searchDestinationsWithRequestBuilder(destinationSearch: destinationSearch)
      .execute().body
  }

  /**
     Search among destinations.

     Search among destinations with a defined set of parameters.
     - parameter destinationSearch: (body)
     - returns: RequestBuilder<[Destination]>
     */
  open class func searchDestinationsWithRequestBuilder(destinationSearch: DestinationSearch)
    -> RequestBuilder<[Destination]>
  {
    let localVariablePath = "/1/destinations/search"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: destinationSearch)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<[Destination]>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Search among sources.

     - parameter sourceSearch: (body)
     - returns: [Source]
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func searchSources(sourceSearch: SourceSearch) async throws -> [Source] {
    return try await searchSourcesWithRequestBuilder(sourceSearch: sourceSearch).execute().body
  }

  /**
     Search among sources.

     Search among sources with a defined set of parameters.
     - parameter sourceSearch: (body)
     - returns: RequestBuilder<[Source]>
     */
  open class func searchSourcesWithRequestBuilder(sourceSearch: SourceSearch) -> RequestBuilder<
    [Source]
  > {
    let localVariablePath = "/1/sources/search"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: sourceSearch)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<[Source]>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Search among tasks.

     - parameter taskSearch: (body)
     - returns: [IngestionTask]
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func searchTasks(taskSearch: TaskSearch) async throws -> [IngestionTask] {
    return try await searchTasksWithRequestBuilder(taskSearch: taskSearch).execute().body
  }

  /**
     Search among tasks.

     Search among tasks with a defined set of parameters.
     - parameter taskSearch: (body)
     - returns: RequestBuilder<[IngestionTask]>
     */
  open class func searchTasksWithRequestBuilder(taskSearch: TaskSearch) -> RequestBuilder<
    [IngestionTask]
  > {
    let localVariablePath = "/1/tasks/search"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: taskSearch)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<[IngestionTask]>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Trigger a stream listing request.

     - parameter sourceID: (path) The source UUID.
     - returns: DockerSourceDiscover
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func triggerDockerSourceDiscover(sourceID: String) async throws -> DockerSourceDiscover
  {
    return try await triggerDockerSourceDiscoverWithRequestBuilder(sourceID: sourceID).execute()
      .body
  }

  /**
     Trigger a stream listing request.

     Trigger a stream listing request for a Singer specification compatible docker type source.
     - parameter sourceID: (path) The source UUID.
     - returns: RequestBuilder<DockerSourceDiscover>
     */
  open class func triggerDockerSourceDiscoverWithRequestBuilder(sourceID: String) -> RequestBuilder<
    DockerSourceDiscover
  > {
    var localVariablePath = "/1/sources/{sourceID}/discover"
    let sourceIDPreEscape = "\(APIHelper.mapValueToPathItem(sourceID))"
    let sourceIDPostEscape =
      sourceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{sourceID}", with: sourceIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<DockerSourceDiscover>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Update a authentication.

     - parameter authenticationID: (path) The authentication UUID.
     - parameter authenticationUpdate: (body)
     - returns: AuthenticationUpdateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateAuthentication(
    authenticationID: String, authenticationUpdate: AuthenticationUpdate
  ) async throws -> AuthenticationUpdateResponse {
    return try await updateAuthenticationWithRequestBuilder(
      authenticationID: authenticationID, authenticationUpdate: authenticationUpdate
    ).execute().body
  }

  /**
     Update a authentication.

     Update the authentication of the given authenticationID.
     - parameter authenticationID: (path) The authentication UUID.
     - parameter authenticationUpdate: (body)
     - returns: RequestBuilder<AuthenticationUpdateResponse>
     */
  open class func updateAuthenticationWithRequestBuilder(
    authenticationID: String, authenticationUpdate: AuthenticationUpdate
  ) -> RequestBuilder<AuthenticationUpdateResponse> {
    var localVariablePath = "/1/authentications/{authenticationID}"
    let authenticationIDPreEscape = "\(APIHelper.mapValueToPathItem(authenticationID))"
    let authenticationIDPostEscape =
      authenticationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{authenticationID}", with: authenticationIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: authenticationUpdate)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AuthenticationUpdateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Update a destination.

     - parameter destinationID: (path) The destination UUID.
     - parameter destinationUpdate: (body)
     - returns: DestinationUpdateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateDestination(destinationID: String, destinationUpdate: DestinationUpdate)
    async throws -> DestinationUpdateResponse
  {
    return try await updateDestinationWithRequestBuilder(
      destinationID: destinationID, destinationUpdate: destinationUpdate
    ).execute().body
  }

  /**
     Update a destination.

     Update the destination of the given destinationID.
     - parameter destinationID: (path) The destination UUID.
     - parameter destinationUpdate: (body)
     - returns: RequestBuilder<DestinationUpdateResponse>
     */
  open class func updateDestinationWithRequestBuilder(
    destinationID: String, destinationUpdate: DestinationUpdate
  ) -> RequestBuilder<DestinationUpdateResponse> {
    var localVariablePath = "/1/destinations/{destinationID}"
    let destinationIDPreEscape = "\(APIHelper.mapValueToPathItem(destinationID))"
    let destinationIDPostEscape =
      destinationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{destinationID}", with: destinationIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: destinationUpdate)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<DestinationUpdateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Update a source.

     - parameter sourceID: (path) The source UUID.
     - parameter sourceUpdate: (body)
     - returns: SourceUpdateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateSource(sourceID: String, sourceUpdate: SourceUpdate) async throws
    -> SourceUpdateResponse
  {
    return try await updateSourceWithRequestBuilder(sourceID: sourceID, sourceUpdate: sourceUpdate)
      .execute().body
  }

  /**
     Update a source.

     Update the source of the given sourceID.
     - parameter sourceID: (path) The source UUID.
     - parameter sourceUpdate: (body)
     - returns: RequestBuilder<SourceUpdateResponse>
     */
  open class func updateSourceWithRequestBuilder(sourceID: String, sourceUpdate: SourceUpdate)
    -> RequestBuilder<SourceUpdateResponse>
  {
    var localVariablePath = "/1/sources/{sourceID}"
    let sourceIDPreEscape = "\(APIHelper.mapValueToPathItem(sourceID))"
    let sourceIDPostEscape =
      sourceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{sourceID}", with: sourceIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: sourceUpdate)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<SourceUpdateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Update a task.

     - parameter taskID: (path) The task UUID.
     - parameter taskUpdate: (body)
     - returns: TaskUpdateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateTask(taskID: String, taskUpdate: TaskUpdate) async throws
    -> TaskUpdateResponse
  {
    return try await updateTaskWithRequestBuilder(taskID: taskID, taskUpdate: taskUpdate).execute()
      .body
  }

  /**
     Update a task.

     Update the task of the given taskID.
     - parameter taskID: (path) The task UUID.
     - parameter taskUpdate: (body)
     - returns: RequestBuilder<TaskUpdateResponse>
     */
  open class func updateTaskWithRequestBuilder(taskID: String, taskUpdate: TaskUpdate)
    -> RequestBuilder<TaskUpdateResponse>
  {
    var localVariablePath = "/1/tasks/{taskID}"
    let taskIDPreEscape = "\(APIHelper.mapValueToPathItem(taskID))"
    let taskIDPostEscape =
      taskIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{taskID}", with: taskIDPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: taskUpdate)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<TaskUpdateResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }
}
