//
// QuerySuggestionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

open class QuerySuggestionsAPI {

  /**
     Create a configuration.

     - parameter querySuggestionsConfigurationWithIndex: (body)
     - returns: BaseResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func createConfig(
    querySuggestionsConfigurationWithIndex: QuerySuggestionsConfigurationWithIndex
  ) async throws -> BaseResponse {
    return try await createConfigWithRequestBuilder(
      querySuggestionsConfigurationWithIndex: querySuggestionsConfigurationWithIndex
    ).execute().body
  }

  /**
     Create a configuration.

     Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application.
     - parameter querySuggestionsConfigurationWithIndex: (body)
     - returns: RequestBuilder<BaseResponse>
     */
  open class func createConfigWithRequestBuilder(
    querySuggestionsConfigurationWithIndex: QuerySuggestionsConfigurationWithIndex
  ) -> RequestBuilder<BaseResponse> {
    let localVariablePath = "/1/configs"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: querySuggestionsConfigurationWithIndex)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<BaseResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customDelete(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customDeleteWithRequestBuilder(path: path, parameters: parameters).execute()
      .body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customDeleteWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customGet(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customGetWithRequestBuilder(path: path, parameters: parameters).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customGetWithRequestBuilder(path: String, parameters: [String: AnyCodable]? = nil)
    -> RequestBuilder<AnyCodable>
  {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customPost(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) async throws -> AnyCodable {
    return try await customPostWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customPostWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customPut(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) async throws -> AnyCodable {
    return try await customPutWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customPutWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Delete a configuration.

     - parameter indexName: (path) Query Suggestions index name.
     - returns: BaseResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteConfig(indexName: String) async throws -> BaseResponse {
    return try await deleteConfigWithRequestBuilder(indexName: indexName).execute().body
  }

  /**
     Delete a configuration.

     Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted.
     - parameter indexName: (path) Query Suggestions index name.
     - returns: RequestBuilder<BaseResponse>
     */
  open class func deleteConfigWithRequestBuilder(indexName: String) -> RequestBuilder<BaseResponse>
  {
    var localVariablePath = "/1/configs/{indexName}"
    let indexNamePreEscape = "\(APIHelper.mapValueToPathItem(indexName))"
    let indexNamePostEscape =
      indexNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{indexName}", with: indexNamePostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<BaseResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     List configurations.

     - returns: [QuerySuggestionsConfigurationResponse]
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getAllConfigs() async throws -> [QuerySuggestionsConfigurationResponse] {
    return try await getAllConfigsWithRequestBuilder().execute().body
  }

  /**
     List configurations.

     List all Query Suggestions configurations of your Algolia application.
     - returns: RequestBuilder<[QuerySuggestionsConfigurationResponse]>
     */
  open class func getAllConfigsWithRequestBuilder() -> RequestBuilder<
    [QuerySuggestionsConfigurationResponse]
  > {
    let localVariablePath = "/1/configs"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<[QuerySuggestionsConfigurationResponse]>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get a configuration.

     - parameter indexName: (path) Query Suggestions index name.
     - returns: QuerySuggestionsConfigurationResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getConfig(indexName: String) async throws -> QuerySuggestionsConfigurationResponse
  {
    return try await getConfigWithRequestBuilder(indexName: indexName).execute().body
  }

  /**
     Get a configuration.

     Get a single Query Suggestions configuration.
     - parameter indexName: (path) Query Suggestions index name.
     - returns: RequestBuilder<QuerySuggestionsConfigurationResponse>
     */
  open class func getConfigWithRequestBuilder(indexName: String) -> RequestBuilder<
    QuerySuggestionsConfigurationResponse
  > {
    var localVariablePath = "/1/configs/{indexName}"
    let indexNamePreEscape = "\(APIHelper.mapValueToPathItem(indexName))"
    let indexNamePostEscape =
      indexNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{indexName}", with: indexNamePostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<QuerySuggestionsConfigurationResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get configuration status.

     - parameter indexName: (path) Query Suggestions index name.
     - returns: GetConfigStatus200Response
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getConfigStatus(indexName: String) async throws -> GetConfigStatus200Response {
    return try await getConfigStatusWithRequestBuilder(indexName: indexName).execute().body
  }

  /**
     Get configuration status.

     Report the status of a Query Suggestions index.
     - parameter indexName: (path) Query Suggestions index name.
     - returns: RequestBuilder<GetConfigStatus200Response>
     */
  open class func getConfigStatusWithRequestBuilder(indexName: String) -> RequestBuilder<
    GetConfigStatus200Response
  > {
    var localVariablePath = "/1/configs/{indexName}/status"
    let indexNamePreEscape = "\(APIHelper.mapValueToPathItem(indexName))"
    let indexNamePostEscape =
      indexNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{indexName}", with: indexNamePostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetConfigStatus200Response>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get logs.

     - parameter indexName: (path) Query Suggestions index name.
     - returns: GetLogFile200Response
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getLogFile(indexName: String) async throws -> GetLogFile200Response {
    return try await getLogFileWithRequestBuilder(indexName: indexName).execute().body
  }

  /**
     Get logs.

     Get the logs for a single Query Suggestions index.
     - parameter indexName: (path) Query Suggestions index name.
     - returns: RequestBuilder<GetLogFile200Response>
     */
  open class func getLogFileWithRequestBuilder(indexName: String) -> RequestBuilder<
    GetLogFile200Response
  > {
    var localVariablePath = "/1/logs/{indexName}"
    let indexNamePreEscape = "\(APIHelper.mapValueToPathItem(indexName))"
    let indexNamePostEscape =
      indexNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{indexName}", with: indexNamePostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetLogFile200Response>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Update a configuration.

     - parameter indexName: (path) Query Suggestions index name.
     - parameter querySuggestionsConfiguration: (body)
     - returns: BaseResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateConfig(
    indexName: String, querySuggestionsConfiguration: QuerySuggestionsConfiguration
  ) async throws -> BaseResponse {
    return try await updateConfigWithRequestBuilder(
      indexName: indexName, querySuggestionsConfiguration: querySuggestionsConfiguration
    ).execute().body
  }

  /**
     Update a configuration.

     Update a QuerySuggestions configuration.
     - parameter indexName: (path) Query Suggestions index name.
     - parameter querySuggestionsConfiguration: (body)
     - returns: RequestBuilder<BaseResponse>
     */
  open class func updateConfigWithRequestBuilder(
    indexName: String, querySuggestionsConfiguration: QuerySuggestionsConfiguration
  ) -> RequestBuilder<BaseResponse> {
    var localVariablePath = "/1/configs/{indexName}"
    let indexNamePreEscape = "\(APIHelper.mapValueToPathItem(indexName))"
    let indexNamePostEscape =
      indexNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{indexName}", with: indexNamePostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: querySuggestionsConfiguration)

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<BaseResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }
}
