//
// MonitoringAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

open class MonitoringAPI {

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customDelete(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customDeleteWithRequestBuilder(path: path, parameters: parameters).execute()
      .body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customDeleteWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customGet(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customGetWithRequestBuilder(path: path, parameters: parameters).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customGetWithRequestBuilder(path: String, parameters: [String: AnyCodable]? = nil)
    -> RequestBuilder<AnyCodable>
  {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customPost(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) async throws -> AnyCodable {
    return try await customPostWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customPostWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func customPut(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) async throws -> AnyCodable {
    return try await customPutWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open class func customPutWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: AnyCodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    var localVariableUrlComponents = URLComponents(string: localVariableURLString)
    localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     List incidents for selected clusters.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: IncidentsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getClusterIncidents(clusters: String) async throws -> IncidentsResponse {
    return try await getClusterIncidentsWithRequestBuilder(clusters: clusters).execute().body
  }

  /**
     List incidents for selected clusters.

     List known incidents for selected clusters.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<IncidentsResponse>
     */
  open class func getClusterIncidentsWithRequestBuilder(clusters: String) -> RequestBuilder<
    IncidentsResponse
  > {
    var localVariablePath = "/1/incidents/{clusters}"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<IncidentsResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     List statuses of selected clusters.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: StatusResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getClusterStatus(clusters: String) async throws -> StatusResponse {
    return try await getClusterStatusWithRequestBuilder(clusters: clusters).execute().body
  }

  /**
     List statuses of selected clusters.

     Report whether a cluster is operational.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<StatusResponse>
     */
  open class func getClusterStatusWithRequestBuilder(clusters: String) -> RequestBuilder<
    StatusResponse
  > {
    var localVariablePath = "/1/status/{clusters}"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<StatusResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     List incidents.

     - returns: IncidentsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getIncidents() async throws -> IncidentsResponse {
    return try await getIncidentsWithRequestBuilder().execute().body
  }

  /**
     List incidents.

     List known incidents for all clusters.
     - returns: RequestBuilder<IncidentsResponse>
     */
  open class func getIncidentsWithRequestBuilder() -> RequestBuilder<IncidentsResponse> {
    let localVariablePath = "/1/incidents"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<IncidentsResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     Get indexing times.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: IndexingTimeResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getIndexingTime(clusters: String) async throws -> IndexingTimeResponse {
    return try await getIndexingTimeWithRequestBuilder(clusters: clusters).execute().body
  }

  /**
     Get indexing times.

     List the average times for indexing operations for selected clusters.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<IndexingTimeResponse>
     */
  open class func getIndexingTimeWithRequestBuilder(clusters: String) -> RequestBuilder<
    IndexingTimeResponse
  > {
    var localVariablePath = "/1/indexing/{clusters}"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<IndexingTimeResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     List servers.

     - returns: InventoryResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getInventory() async throws -> InventoryResponse {
    return try await getInventoryWithRequestBuilder().execute().body
  }

  /**
     List servers.

     List the servers belonging to clusters.  The response depends on whether you authenticate your API request:  - With authentication, the response lists the servers assigned to your Algolia application's cluster.  - Without authentication, the response lists the servers for all Algolia clusters.
     - returns: RequestBuilder<InventoryResponse>
     */
  open class func getInventoryWithRequestBuilder() -> RequestBuilder<InventoryResponse> {
    let localVariablePath = "/1/inventory/servers"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<InventoryResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }

  /**
     Get search latency times.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: LatencyResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getLatency(clusters: String) async throws -> LatencyResponse {
    return try await getLatencyWithRequestBuilder(clusters: clusters).execute().body
  }

  /**
     Get search latency times.

     List the average latency for search requests for selected clusters.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<LatencyResponse>
     */
  open class func getLatencyWithRequestBuilder(clusters: String) -> RequestBuilder<LatencyResponse>
  {
    var localVariablePath = "/1/latency/{clusters}"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<LatencyResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     Get metrics for a given period.

     - parameter metric: (path) Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use &#x60;*&#x60; as the parameter.
     - parameter period: (path) Period over which to aggregate the metrics:  - &#x60;minute&#x60;. Aggregate the last minute. 1 data point per 10 seconds. - &#x60;hour&#x60;. Aggregate the last hour. 1 data point per minute. - &#x60;day&#x60;. Aggregate the last day. 1 data point per 10 minutes. - &#x60;week&#x60;. Aggregate the last week. 1 data point per hour. - &#x60;month&#x60;. Aggregate the last month. 1 data point per day.
     - returns: InfrastructureResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getMetrics(metric: Metric, period: Period) async throws -> InfrastructureResponse
  {
    return try await getMetricsWithRequestBuilder(metric: metric, period: period).execute().body
  }

  /**
     Get metrics for a given period.

     Report the aggregate value of a metric for a selected period of time.
     - parameter metric: (path) Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use &#x60;*&#x60; as the parameter.
     - parameter period: (path) Period over which to aggregate the metrics:  - &#x60;minute&#x60;. Aggregate the last minute. 1 data point per 10 seconds. - &#x60;hour&#x60;. Aggregate the last hour. 1 data point per minute. - &#x60;day&#x60;. Aggregate the last day. 1 data point per 10 minutes. - &#x60;week&#x60;. Aggregate the last week. 1 data point per hour. - &#x60;month&#x60;. Aggregate the last month. 1 data point per day.
     - returns: RequestBuilder<InfrastructureResponse>
     */
  open class func getMetricsWithRequestBuilder(metric: Metric, period: Period) -> RequestBuilder<
    InfrastructureResponse
  > {
    var localVariablePath = "/1/infrastructure/{metric}/period/{period}"
    let metricPreEscape = "\(APIHelper.mapValueToPathItem(metric))"
    let metricPostEscape =
      metricPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{metric}", with: metricPostEscape, options: .literal, range: nil)
    let periodPreEscape = "\(APIHelper.mapValueToPathItem(period))"
    let periodPostEscape =
      periodPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{period}", with: periodPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<InfrastructureResponse>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     Test the reachability of clusters.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: [String: [String: Bool]]
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getReachability(clusters: String) async throws -> [String: [String: Bool]] {
    return try await getReachabilityWithRequestBuilder(clusters: clusters).execute().body
  }

  /**
     Test the reachability of clusters.

     Test whether clusters are reachable or not.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<[String: [String: Bool]]>
     */
  open class func getReachabilityWithRequestBuilder(clusters: String) -> RequestBuilder<
    [String: [String: Bool]]
  > {
    var localVariablePath = "/1/reachability/{clusters}/probes"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<[String: [String: Bool]]>.Type =
      AlgoliaSearchClientAPI.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: false)
  }

  /**
     List cluster statuses.

     - returns: StatusResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getStatus() async throws -> StatusResponse {
    return try await getStatusWithRequestBuilder().execute().body
  }

  /**
     List cluster statuses.

     Report whether clusters are operational.  The response depends on whether you authenticate your API request.  - With authentication, the response includes the status of the cluster assigned to your Algolia application.  - Without authentication, the response lists the statuses of all public Algolia clusters.
     - returns: RequestBuilder<StatusResponse>
     */
  open class func getStatusWithRequestBuilder() -> RequestBuilder<StatusResponse> {
    let localVariablePath = "/1/status"
    let localVariableURLString = AlgoliaSearchClientAPI.basePath + localVariablePath
    let localVariableParameters: [String: Any]? = nil

    let localVariableUrlComponents = URLComponents(string: localVariableURLString)

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<StatusResponse>.Type = AlgoliaSearchClientAPI
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString),
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true)
  }
}
